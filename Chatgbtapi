import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.*;

public class ChatGPTAPIExample {

   public static String chatGPT(String prompt, int maxRetries) {
      // String url ="https://api.openai.com/v1/engines/davinci-codex/completions"; 
       String url = "https://api.openai.com/v1/chat/completions";
       // API key goes here
       String apiKey = "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";
       String model = "gpt-3.5-turbo";

       for (int retry = 0; retry <= maxRetries; retry++) {
           try {
            URL obj = new URL(url);
            HttpURLConnection connection = (HttpURLConnection) obj.openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Authorization", "Bearer " + apiKey);
            connection.setRequestProperty("Content-Type", "application/json");

            // The request body
            String body = "{\"model\": \"" + model + "\", \"messages\": [{\"role\": \"user\", \"content\": \"" + prompt + "\"}]}";
            connection.setDoOutput(true);
            OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
            writer.write(body);
            writer.flush();
            writer.close();

            //printRateLimitInformation(connection);

            // Response from ChatGPT
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line;

            StringBuffer response = new StringBuffer();

            while ((line = br.readLine()) != null) {
                response.append(line);
            }
            br.close();

            // calls the method to extract the message.
            return extractMessageFromJSONResponse(response.toString());

        } catch (IOException e) {
            System.out.println("Retry " + retry + ": " + e.getMessage());

                 // Implement exponential backoff
                 int delay = (int) Math.pow(2, retry);
                 try {
                     Thread.sleep(delay * 1000);  // Convert seconds to milliseconds
                 } catch (InterruptedException ex) {
                     Thread.currentThread().interrupt();
                 }
        }
       }
       System.out.println("Max retries reached. Unable to get a response.");
        return null;
        
   
       
   }

   public static String extractMessageFromJSONResponse(String response) {
       int start = response.indexOf("content")+ 11;

       int end = response.indexOf("\"", start);

       return response.substring(start, end);

   }
   
public static void printRateLimitInformation(HttpURLConnection connection) {
         Map<String, List<String>> headers = connection.getHeaderFields();
    System.out.println("Headers: " + headers);

    // Get specific headers
    List<String> remainingHeader = headers.get("X-RateLimit-Remaining");
    List<String> limitHeader = headers.get("X-RateLimit-Limit");

    if (remainingHeader != null && limitHeader != null) {
        int remainingRequests = Integer.parseInt(remainingHeader.get(0));
        int limit = Integer.parseInt(limitHeader.get(0));

        System.out.println("Remaining Requests: " + remainingRequests);
        System.out.println("Request Limit: " + limit);

        if (remainingRequests == 0) {
            System.out.println("You have reached the rate limit. Consider waiting or upgrading your plan.");
        }
    } else {
        System.out.println("Rate limit headers not found in the response.");
    }
        
    }
   public static void main(String[] args) {
       int maxRetries = 3;
       System.out.println(chatGPT("hello, how are you? Can you tell me what's a Fibonacci Number?", maxRetries));

   }
}
